@{
    ViewData["Title"] = "Home Page";
}


<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-BmbxuPwQa2lc/FVzBcNJ7UAyJxM6wuqIj61tLrc4wSX0szH/Ev+nYRRuWlolflfl" crossorigin="anonymous">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" />

    <script src="~/js/d3.v3.js"></script>

</head>
<body>

    <div class="container-main">
        <div id="scatterPlot" class="col-6 float-left">
        </div>




        <div class="col-4 float-left batch-col">
            <div class="label">Batches</div>
            <div class="row justify-content-center">
                <ul id="batchesLst" class="list-group-horizontal d-flex flex-wrap justify-content-center float-left"></ul>


                    <button id="simulateSale col-2" class="btn btn-outline-dark">simulateSale</button>
                    <button id="createBatch col-2" class="btn btn-outline-dark">create</button>



                    <select id="nameOfDoughnutBatch" class="form-select col-3">
                        <option value="Churro">Churro</option>
                        <option value="Frosted Sprinkled">Frosted Sprinkled</option>
                        <option value="Strawberry Filled">Strawberry Filled</option>
                        <option value="Captain Crunched">Captain Crunched</option>
                        <option value="Nutella Filled">Nutella Filled</option>
                        <option value="Chocolate Glazed">Chocolate Glazed</option>
                        <option value="Classic Glazed">Classic Glazed</option>
                        <option value="Powdered Sugar">Powdered Sugar</option>
                    </select>
                    <select id="quantityOfBatch" class="form-select col-2">
                        <option value="6">6</option>
                        <option value="12">12</option>
                        <option value="24">24</option>
                        <option value="48">48</option>
                    </select>
            </div>

        </div>

        <div class="col-2 float-right totals-col">
            <div class="label"></div>
            <div class="row">


            </div>
            <ul id="totalLst" class="list-group-horizontal flex-wrap"></ul>
        </div>


    </div>

    <script type="text/javascript">

        async function timed() {

            while (true) {




                // Scaterplot.
                var w = d3.select("#scatterPlot").node().getBoundingClientRect().width;
                var h = d3.select("#scatterPlot").node().getBoundingClientRect().height;
                var padding = 50;

                var svgMain = d3.select("#scatterPlot")
                    .append("svg")
                    .attr("width", w)
                    .attr("height", h);



                // Perhaps time elapsed since creation vs total left in inventory?
                //Dynamic, random dataset
                var dataset = [];
                var numDataPoints = 10;
                var xRange = Math.random() * 1000;
                var yRange = Math.random() * 1000;
                for (var i = 0; i < numDataPoints; i++) {
                    var newNumber1 = Math.round(Math.random() * xRange);
                    var newNumber2 = Math.round(Math.random() * yRange);
                    dataset.push([newNumber1, newNumber2]);
                }

                var xScale = d3.scale.linear()
                    .domain([0, d3.max(dataset, function (d) { return d[0]; })])
                    .range([padding, w - padding * 4]);

                var yScale = d3.scale.linear()
                    .domain([0, d3.max(dataset, function (d) { return d[1]; })])
                    .range([h - padding, padding]);

                var rScale = d3.scale.linear()
                    .domain([0, d3.max(dataset, function (d) { return d[1]; })])
                    .range([2, 10]);






                svgMain.selectAll("circle")
                    .data(dataset)
                    .enter()
                    .append("circle")
                    .on('mouseover', function () {

                        console.log(this.childNodes);
                    })
                    .attr("cx", function (d) {
                        return xScale(d[0]);
                    })
                    .attr("cy", function (d) {
                        return yScale(d[1]);
                    })
                    .attr("r", function (d) {
                        return rScale(d[1] * 2);
                    });

                svgMain.selectAll("text")
                    .data(dataset)
                    .enter()
                    .append("text")
                    .text(function (d) {
                        return "[" + d[0] + "," + d[1] + "]";
                    })
                    .attr("class", "textPlots")
                    .style("font-family", "sans-serif")
                    .style("font-size", "11px")
                    .style("fill", "white")
                    .attr("id", function (d) {
                        return d[0] + "_" + d[1];
                    })
                    .attr("x", function (d) {
                        return xScale(d[0] + 8);
                    })
                    .attr("y", function (d) {
                        return yScale(d[1]);
                    });




                // X-Axis.
                var xAxis = d3.svg.axis()
                    .scale(xScale)
                    .orient("bottom");

                // Create.
                svgMain.append("g")
                    .attr("class", "axis")
                    .attr("transform", "translate(0," + (h - padding) + ")")
                    .call(xAxis);

                // Y-Axis.
                var yAxis = d3.svg.axis()
                    .scale(yScale)
                    .orient("left")
                    .ticks(5);

                // Create.
                svgMain.append("g")
                    .attr("class", "axis")
                    .attr("transform", "translate(" + padding + ",0)")
                    .call(yAxis);

                await sleep(5000);
                d3.select("svg").remove();
            }

        }

        function sleep(ms) {
            return new Promise(resolve => setTimeout(resolve, ms));
        }

        timed();
    </script>





</body>
</html>
<script type="text/javascript">

    window.addEventListener("load", updateAll, false);
    document.getElementById("createBatch").addEventListener("click", createBatchRecord, false);
    document.getElementById("simulateSale").addEventListener("click", simulateSale, false);

    function updateAll() {
        var ul = document.getElementsByClassName("list-group-horizontal");
        console.log(ul);

        $.each(ul, function (key, value) {
            console.log("list is: " + value);
            while (value.firstChild) {
                value.removeChild(value.firstChild);
                console.log("removed first child: " + value.firstChild);
            }

        });

        getAllBatches();
        getSales();
    };

    function createBatchRecord() {
        var nameOf = document.getElementById("nameOfDoughnutBatch").value;
        var total = document.getElementById("quantityOfBatch").value;
        $.ajax({
            type: 'POST',
            url: '/Home/CreateBatch',
            dataType: 'json',
            data: "data=" + JSON.stringify({ id: 0, nameOf: nameOf, total: total }),
            success: function (data) {
                response = JSON.parse(data);
                alert(response);
                updateAll();
            },
            error: function () { console.log("FAIL ON CREATE BATCH"); }
        });
    };

    function getAllBatches() {
        $.ajax({
            type: 'GET',
            url: '/Home/GetBatches',
            dataType: 'json',
            success: function (data) {
                response = JSON.parse(data);
                console.log(response);
                $.each(response, function (key, value) {
                    var li =
                        $('<div class="card"; style="margin: 6px; width:85%;"><div class="container"; style=" color: white;">'
                            + '<div class="card-header"><div class="form-text"; style="color: white;">'
                            + value['NameOf'] + '</div><div id="flexSwitchCompleted"; class="form-check form-switch float-right"><input class="form-check-input"; type="checkbox"></div><div class="float-right"  style="color: #808080";>' 
                            + '</div></div><div class="card-content" >' + value['Total'] + " left" + '</div><div class="card-footer"; style=" padding:2px; display: flex; justify-content: space-between;"><div style="color: #d09a49; font-size: small; ">' + '<mark>' + "expires: " + value['Expire'] + '</div></mark><div  style="color: #47a1dd; font-size: medium; ">' + "total sold: " + value['TotalSold'] + '</div></div></div></div>');
                    $('#batchesLst').append(li);
                });
            },
            error: function () { console.log("FAIL ON CREATE BATCH"); }

        });
    };

    function getSales() {
        $.ajax({
            url: '/Home/getTotalSold',
            type: 'GET',
            dataType: 'json',
            success: function (data) {
                response = JSON.parse(data);
                console.log(response);
                $.each(response, function (key, value) {
                    var li =
                        $('<div class="card-totals" style="border-color: transparent; width:auto; margin:20px; padding:10px; height:auto; background-color: transparent"><div style=" font-size: large; color: #808080;">' + value['NameOf'] + '</div><div><span class=""; style="color:white; font-size: medium; font-weight:thin; marigin-bottom: 2px;">' + value['TotalMoneyAmount'] + " $" + '</span></div><div style="color: #808080; margin-top: 2px;">' + "qty sold: " + value['Total'] + '</div></div>');
                    $('#totalLst').append(li);
                });
            },
            error: function () { console.log("FAIL ON GET TOTAL BY TYPE"); }
        });
    };

    //function deleteFromInventory() {

    //    var isCheckedAndIds = Array.prototype.slice.call(document.getElementsByClassName("form-check-input")).map(function (x) { return { "isChecked": x['checked'], "Id": x.nextSibling.innerText }; });

    //    function removeItemAll(isCheckedAndIds) {
    //        var i = 0;
    //        while (i < isCheckedAndIds.length) {
    //            if (isCheckedAndIds[i].isChecked === false) {
    //                isCheckedAndIds.splice(i, 1);
    //            } else {
    //                ++i;
    //            }
    //        }
    //        console.log(isCheckedAndIds);
    //        return isCheckedAndIds;
    //    };

    //    var batchesCheckedToDelete = removeItemAll(isCheckedAndIds);

    //    $.ajax({
    //        type: 'POST',
    //        url: '/Home/DeleteFromInventory',
    //        dataType: 'json',
    //        data: "data=" + JSON.stringify(batchesCheckedToDelete),
    //        success: function (data) {
    //            updateAll();
    //        },
    //        error: function () { console.log("FAIL ON DELETE FROM INVENTORY"); }
    //    });
    //};
</script>
